<?php


/**
 * @file
 * Module code for DrupalChat.
 */

define('DRUPALCHAT_AJAX', 0);
define('DRUPALCHAT_LONGPOLL', 1);
define('DRUPALCHAT_NODEJS', 2);
define('DRUPALCHAT_COMMERCIAL', 3);

define('DRUPALCHAT_USER_OFFLINE', 0);
define('DRUPALCHAT_USER_ONLINE', 1);
define('DRUPALCHAT_USER_IDLE', 2);

define('DRUPALCHAT_REL_AUTH', 0);
define('DRUPALCHAT_REL_UR', 1);
define('DRUPALCHAT_REL_FF', 2);

define('DRUPALCHAT_EXTERNAL_HOST', 'http://api.iflychat.com');
define('DRUPALCHAT_EXTERNAL_PORT', '80');
define('DRUPALCHAT_EXTERNAL_A_HOST', 'https://api.iflychat.com');
define('DRUPALCHAT_EXTERNAL_A_PORT', '443');

function drupalchat_verify_access() {
  return (user_access('access drupalchat') && (_drupalchat_get_sid() != -1));
}

function _drupalchat_get_sid($create = TRUE) {
  global $user;
  $sid = -1;
  if (variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL) == DRUPALCHAT_NODEJS && isset($_SESSION['nodejs_config']['authToken'])) {
    if ((!isset($_SESSION['drupalchat']) && ($user->uid <> 0 || $create)) || $_SESSION['drupalchat']) {
      $sid = $_SESSION['nodejs_config']['authToken'];
      $_SESSION['drupalchat'] = TRUE;
    }
  }
  elseif ($user->uid == 0 && function_exists('session_api_get_sid')) {
    $_COOKIE['drupalchat_c_session'] = time();
	$sid = session_api_get_sid($create);
  }
  elseif ($user->uid>0) {
    if(property_exists($user,'sid')) {
      $sid = $user->sid;
	}
	else {
	  $sid = '';
	}
  }
  return $sid;
}

/**
 * Implements hook_help().
 */
function drupalchat_help($path, $arg) {
  if ($path == 'admin/help#drupalchat') {
    return '<p>' . t('Provides one on one chat.') . '</p>';
  }
}
/**
 * Implements hook_permission().
 */
function drupalchat_permission() {
  return array(
    'administer drupalchat' => array(
      'title' => t('administer drupalchat'),
      'description' => t('Administer drupalchat'),
    ),
    'access drupalchat' => array(
      'title' => t('access drupalchat'),
      'description' => t('Access drupalchat'),
    ),
  );
}

/**
 * Implements hook_footer().
 */
/*function drupalchat_footer() {
  global $user;
  if (drupalchat_verify_access()) {
    return theme('drupalchat');
  }
}*/


function drupalchat_page_alter(&$page) {
    global $user;
    
    if (drupalchat_verify_access() && (variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL) != DRUPALCHAT_COMMERCIAL)) {
        //return theme('drupalchat');
        //echo theme('drupalchat');
        //if (variable_get('dev_query', 0)) {
            $page['page_bottom']['devel']= array(
            '#type' => 'markup',
            '#markup' => '<div style="clear:both;">' . theme('drupalchat') . '</div>',
            );
        //}
    }

}


/**
 * Implements hook_theme().
 */
function drupalchat_theme() {
  return array(
    'drupalchat' => array(
      'template' => 'drupalchat',
    ),
    'drupalchat_subpanel' => array(
      'variables' => array('subpanel' => NULL),
    	'template' => 'drupalchat-subpanel',
    ),
  );
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_preprocess_drupalchat(&$variables) {
  $modules = module_invoke_all('drupalchat_subpanel');

  $items = array();
  $items[] = array('data' => _drupalchat_chat(), 'id' => 'chatpanel');
  foreach ($modules as $module) {
    $items[] = array('data' => theme('drupalchat_subpanel', array('subpanel' => $module)), 'id' => $module['name']);
  }

  $variables['subpanels'] = theme('item_list', array('items' => $items, 'title' => NULL, 'type' => 'ul', 'attributes' => array('id' => 'mainpanel')));
  
}

function _drupalchat_chat() {
  global $user;

  $chat = array();
  $chat['name'] = 'chat';
  $chat['header'] = t('Chat');

  $buddylist = _drupalchat_buddylist($user->uid);
  $buddylist_online = _drupalchat_buddylist_online($buddylist);


  //JON COMMENTS
  $chat['contents'] = '<div class="chat_options">';
  //$chat['contents'] .= '<a class="options" href="#">' . t('Options') . '</a>';
  $chat['contents'] .= '<a class="chat_loading" href="#"></a>';
  $chat['contents'] .= '</div>';

  $items = array();
  foreach ($buddylist_online as $key => $value) {
    if ($key != 'total') {
      $items[] = array('data' => '<a class="' . $key . '" href="#">' . $value['name'] . '</a>', 'class' => array('status-' . $value['status']));
    }
  }
  if ($items) {
    $chat['contents'] .= theme('item_list', array('items' => $items));
  }
  else {
    $chat['contents'] .= theme('item_list', array('items' => array(array(
          'data' => l(t('No users online'), 'user'),
          'class' => array('link'),
        ))));
  }
  $chat['text'] = t('Chat') . ' (<span class="online-count">' . count($items) . '</span>)';

  $theme = variable_get('drupalchat_theme', 'light');
  $chat['icon'] = theme('image', array('path' => drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/images/loading.gif', 'width' => NULL, 'height' => NULL, 'alt' => t('chat'), 'attributes' => array('class' => 'icon')));

  return theme('drupalchat_subpanel', array('subpanel' => $chat));
}

/**
 * Implements hook_menu().
 */
function drupalchat_menu() {

    // Administration pages.
    $items['admin/config/drupalchat'] = array(
        'title' => 'DrupalChat',
        'description' => 'Administer DrupalChat.',
        'position' => 'left',
        'weight' => -10,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('access administration pages'),
        'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
    );



    $items['admin/config/drupalchat/configuration'] = array(
        'title' => 'Configure',
        'description' => 'Configure DrupalChat module.',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('administer drupalchat'),
        'page arguments' => array('drupalchat_settings_form'),
        'file' => 'drupalchat.admin.inc',
        'weight' => 10,
    );


  /*$items['admin/config/drupalchat'] = array(
    	'title' => 'DrupalChat',
    	'description' => 'Administer DrupalChat',	
    	'page callback' => 'drupal_get_form',
    	'page arguments' => array('drupalchat_settings_form'),
    	'access arguments' => array('administer drupalchat'),	
    	'file' => 'drupalchat.admin.inc',
    );*/
  $items['drupalchat/poll'] = array(
		'page callback' => 'drupalchat_poll',
		'access arguments' => array('access drupalchat'),
		'type' => MENU_CALLBACK,
	);
  $items['drupalchat/send'] = array(
		'page callback' => 'drupalchat_send',
		'access arguments' => array('access drupalchat'),
		'type' => MENU_CALLBACK,
	);
  $items['drupalchat/status'] = array(
    'page callback' => 'drupalchat_status',
    'access arguments' => array('access drupalchat'),
    'type' => MENU_CALLBACK,
  );
  $items['drupalchat/channel/add'] = array(
    'page callback' => 'drupalchat_channel_add',
    'access arguments' => array('access drupalchat'),
    'type' => MENU_CALLBACK,
  );
  
  $items['drupalchat/ur-autocomplete'] = array(
    'page callback' => '_drupalchat_ur_autocomplete',
    'access arguments' => array('access drupalchat'),
    'type' => MENU_CALLBACK,
  );
  
  $items['drupalchat/messages'] = array(
    'title' => 'Chat Messages',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupalchat_get_messages',
	'access arguments' => array('access drupalchat'),
  );
  
  $items['drupalchat/messages/inbox'] = array(
    'title' => 'Inbox',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['drupalchat/messages/message/%drupalchatmsgid'] = array(
    'title' => 'View Message',
    'type' => MENU_LOCAL_TASK,
	'page callback' => 'drupalchat_get_messages_specific',
	'access arguments' => array('access drupalchat'), 
	'page arguments' => array(3),
  );
  
  return $items;
}

function drupalchatmsgid_to_arg($arg) {
  if ($arg == '%') {
    return 'none';
  }
  else {
    return $arg;
  }
}

/**
 * Implements autocomplete feature for UR Integration.
 */
function _drupalchat_ur_autocomplete($string) {
  $array = drupal_explode_tags($string);
  // Fetch last value
  $last_string =  drupal_strtolower(array_pop($array));
  $matches = array();
  $query = db_select('user_relationship_types', 'u');
  // Select rows that match the string
  $return = $query
    ->fields('u', array('name'))
    ->condition('u.name', '%' . db_like($last_string) . '%', 'LIKE')
    ->range(0, 10)
    ->execute();
  $prefix = count($array) ? drupal_implode_tags($array) . ', ' : '';
  // add matches to $matches  
  foreach ($return as $row) {
    if(!in_array($row->name, $array))
	  $matches[$prefix . $row->name] = check_plain($row->name);
  }
  
  // return for JS
  drupal_json_output($matches);
}

/**
 * Implements hook_cron().
 */
function drupalchat_cron() {
  if(variable_get('drupalchat_log_messages', 1) != 1) { 
    db_delete('drupalchat_msg')
      ->condition('timestamp', (time() - 10), '<')
      ->execute();
    db_delete('drupalchat_users')
      ->condition('timestamp', (time() - 10), '<')
      ->execute();
  }
}

/**
 * Implements hook_user_login().
 */
function drupalchat_user_login(&$edit, $account) {
  setcookie("DRUPALCHAT_NEWLOGIN", 1, time()+120);
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {drupalchat_msg} WHERE uid1 = uid2 AND uid1 = %d', $account->uid) */
  db_delete('drupalchat_msg')
  ->where('uid1 = uid2')
  ->condition('uid1', $account->uid)
  ->execute();
}

/**
 * Implements hook_user().
 */
function drupalchat_user_OLD($op, &$edit, &$account, $category = NULL) { }

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_init() {
  if (drupalchat_verify_access()) {
	global $user, $base_url;
      if($user->uid > 0) {
        $account = user_load($user->uid);
        $user_name = check_plain(format_username($account));
        $status = db_query('SELECT status FROM {drupalchat_users} WHERE uid = :uid', array(':uid' => $user->uid))->fetchField();
        if (!$status) {
          $status = DRUPALCHAT_USER_ONLINE;
          $current_user = (object) array(
            'uid' => $user->uid,
	        'session' => $user->sid,
	        'name' => $user_name,
	        'status' => $status,
	        'timestamp' => time(),
	  );
          drupal_write_record('drupalchat_users', $current_user);
	}
	else {
	  db_update('drupalchat_users')
	    ->fields(array(
	      'timestamp' => time(),
	      'status' => ($status == DRUPALCHAT_USER_OFFLINE ? DRUPALCHAT_USER_ONLINE : $status),
	    ))
	    ->condition('uid', $user->uid)
	    ->execute();
	}
      }
      else {
        $sid = _drupalchat_get_sid();
	if(!$sid || $sid == -1) {
	  return;
	}
	else {
	  $user_name = check_plain('Guest' . time());
	  $status = db_query('SELECT status FROM {drupalchat_users} WHERE uid = :uid AND session = :sid', 
	    array(':uid' => $user->uid, ':sid' => $sid,))->fetchField();
	    if (!$status) {
	      $status = DRUPALCHAT_USER_ONLINE;
	      $current_user = (object) array(
	        'uid' => $user->uid,
	        'session' => $sid,
	        'name' => $user_name,
	        'status' => $status,
	        'timestamp' => time(),
	      );
	      drupal_write_record('drupalchat_users', $current_user);
	    }
	    else {
	      db_update('drupalchat_users')
	        ->fields(array(
	          'timestamp' => time(),
	          'status' => ($status == DRUPALCHAT_USER_OFFLINE ? DRUPALCHAT_USER_ONLINE : $status),
	        ))
	        ->condition('uid', $user->uid)
	        ->condition('session', $sid)
	        ->execute();
	    }
	  }
	}
	$theme = variable_get('drupalchat_theme', 'light');

    $polling_method = variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL);
    if(!$user->uid) {
	  $a_name = db_query('SELECT name FROM {drupalchat_users} WHERE uid = :uid AND session = :sid', array(':uid' => $user->uid, ':sid' => $sid,))->fetchField();
    }
	$my_settings = array(
      'username' => ($user->uid)?$user_name:$a_name,
      'uid' => ($user->uid)?$user->uid:'0-'._drupalchat_get_sid(),
      'current_timestamp' => time(),
      'polling_method' => $polling_method,
      'pollUrl' => url('drupalchat/poll', array('absolute' => TRUE)),
      'sendUrl' => url('drupalchat/send', array('absolute' => TRUE)),
      'statusUrl' => url('drupalchat/status', array('absolute' => TRUE)),
      'status' => $status,
      'goOnline' => t('Go Online'),
      'goIdle' => t('Go Idle'),
      'newMessage' => t('New chat message!'),
      'images' => $base_url . '/' . drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/images/',
      'sound' => base_path() . drupal_get_path('module', 'drupalchat') . '/swf/sound.swf',
      'noUsers' => theme('item_list', array('items' => array(0 => array('data' => t('No users online'), 'class' => array('drupalchatnousers'),)),)),
      'smileyURL' => base_path() . drupal_get_path('module', 'drupalchat') . '/smileys/very_emotional_emoticons-png/png-32x32/',
      'addUrl' => url('drupalchat/channel/add', array('absolute' => TRUE)),
	  'notificationSound' => variable_get('drupalchat_notification_sound', 1),
    );
    if ($polling_method == DRUPALCHAT_AJAX) {
      $my_settings['refresh_rate'] = variable_get('drupalchat_refresh_rate', 2);
      $my_settings['send_rate'] = variable_get('drupalchat_send_rate', 2);
    }
	if($polling_method == DRUPALCHAT_COMMERCIAL) {
	  global $is_https;
	  if($is_https) {
        $my_settings['external_host'] = DRUPALCHAT_EXTERNAL_A_HOST;
        $my_settings['external_port'] = DRUPALCHAT_EXTERNAL_A_PORT; 
	  }
	  else {
	    $my_settings['external_host'] = DRUPALCHAT_EXTERNAL_HOST;
        $my_settings['external_port'] = DRUPALCHAT_EXTERNAL_PORT;
	  }
	  $my_settings['session_key'] = _drupalchat_get_auth((($user->uid)?$user_name:$a_name));
    }
    drupal_add_js(array('drupalchat' => $my_settings), array('type' => "setting", 'group' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/swfobject.js');
    /*if ((variable_get('drupalchat_yui_use_cdn', 1) == 2)) {
      drupal_add_js(drupalchat_yui_path() . '/yui-min.js');
    }
    else {
      drupal_add_js('http://yui.yahooapis.com/3.5.0/build/yui/yui-min.js','external');
    }*/
	//drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/jquery.json-2.3.min.js');
    //drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/drupalchat-jstorage.js');
	//drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/storage-lite.js');
    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/jquery.titlealert.min.js');
    if($polling_method != DRUPALCHAT_COMMERCIAL) {
	  drupal_add_css(drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/' . $theme . '.css');
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/drupalchat-jstorage.js');
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/drupalchat.js');
    }
	drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/ba-emotify.js');
    
    

    //    drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/ba-emotify.js');		
	if($polling_method == DRUPALCHAT_COMMERCIAL) {
	  global $is_https;
	  if($is_https) {
	    //drupal_add_js('https://s3.amazonaws.com/iflychat/js/custom_socket.io.js','external');
		drupal_add_js(DRUPALCHAT_EXTERNAL_A_HOST . ':' . DRUPALCHAT_EXTERNAL_A_PORT . '/j/cache.js','external');
	  }
	  else {
	    drupal_add_js(DRUPALCHAT_EXTERNAL_HOST . ':' . DRUPALCHAT_EXTERNAL_PORT . '/socket.io/socket.io.js','external');
	  }
	  drupal_add_js(DRUPALCHAT_EXTERNAL_A_HOST . ':' . DRUPALCHAT_EXTERNAL_A_PORT . '/h/cache.js','external');
	  /*drupal_add_js("(function() {
    function async_load(){
        var s = document.createElement('script');
        s.type = 'text/javascript';
        s.async = true;
        s.src = '" . DRUPALCHAT_EXTERNAL_A_HOST . ':' . DRUPALCHAT_EXTERNAL_A_PORT . '/h/cache.js' . "';
        var x = document.getElementsByTagName('script')[0];
        x.parentNode.insertBefore(s, x);
    }
    if (window.attachEvent)
        window.attachEvent('onload', async_load);
    else
        window.addEventListener('load', async_load, false);
})();", array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));*/
	  //drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/drupalchat_external.js');
	}
  }
}

function drupalchat_channel_add() {
  global $user;
  if (variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL) == DRUPALCHAT_NODEJS && $user->uid!=0) {   
      echo nodejs_add_user_to_channel($user->uid, 'drupalchat_' . $user->uid);
      $message['uid'] = $user->uid;
      $message['name'] = $user->name;
      $drupalchat_nodejs_message = (object) array(
    'channel' => 'drupalchat_' . $user->uid,
    'broadcast' => FALSE,
    'type' => 'sendName',
    'callback' => 'drupalchatNodejsMessageHandler',
    'data' => drupal_json_encode($message),
  );
  echo $user->name;
      nodejs_enqueue_message($drupalchat_nodejs_message);
    }
}
function _drupalchat_touch_user($uid) {
  db_update('drupalchat_users')
  ->fields(array(
    'timestamp' => time(),
  ))
  ->condition('uid', $uid)
  ->condition('session', _drupalchat_get_sid())
  ->execute();
}

/**
 * Send messages via ajax
 */
function drupalchat_send() {
  global $user;
  $message = (object) array(
        'message_id' => check_plain($_POST['drupalchat_message_id']),
  		'uid1' => ($user->uid)?$user->uid:'0-'._drupalchat_get_sid(),
  		'uid2' => check_plain($_POST['drupalchat_uid2']),
  		'message' => check_plain($_POST['drupalchat_message']),
  		'timestamp' => time(),	
	);
  drupal_write_record('drupalchat_msg', $message);
  foreach (module_implements('drupalchat_send') as $module) {
      $function = $module . '_drupalchat_send';
      $function($message);
    }
  drupal_json_output(array());
}

/**
 * Alter status via ajax
 */
function drupalchat_status() {
  global $user;
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {drupalchat_users} SET status = %d WHERE uid = %d", check_plain($_POST['status']), $user->uid) */
  if($user->uid > 0) {
    db_update('drupalchat_users')
      ->fields(array(
        'status' => check_plain($_POST['status']),
      ))
      ->condition('uid', $user->uid)
      ->execute();
  }
  else {
    db_update('drupalchat_users')
      ->fields(array(
        'status' => check_plain($_POST['status']),
      ))
      ->condition('uid', $user->uid)
	  ->condition('session', _drupalchat_get_sid())
      ->execute();
  }
  drupal_json_output(array());
}

/**
 * Process and get messages
 */
function drupalchat_poll() {
  global $user;


  $initial_time = time();
  $message_count = 0;


  /*if (isset($_GET['drupalchat_last_timestamp'])) {
    $last_timestamp = check_plain($_GET['drupalchat_last_timestamp']);
  }*/
  if ($_GET['drupalchat_last_timestamp'] > 0) {
    $last_timestamp = check_plain($_GET['drupalchat_last_timestamp']);
  }
  else {
    $last_timestamp = $initial_time;
      //$last_timestamp = 1;
  }

  $buddylist = _drupalchat_buddylist($user->uid);
  $buddylist_online_old = _drupalchat_buddylist_online($buddylist);



  $polling_method = variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL);

  //echo $polling_method;
  //die;

  $json['messages'] = array();

  if ($polling_method == DRUPALCHAT_AJAX) {
    /*$messages = db_query('SELECT u.name, m.uid1, m.uid2, m.message, m.timestamp FROM {drupalchat_msg} m INNER JOIN {users} u ON m.uid1 = u.uid WHERE m.uid2 = :uid2 AND m.timestamp > :timestamp ORDER BY m.timestamp ASC', array(':uid2' => $user->uid, ':timestamp' => $last_timestamp));
    foreach ($messages as $message) {
	  $account = user_load($message->uid1);
	  $json['messages'][] = array('message' => $message->message, 'timestamp' => date("H:i", $message->timestamp), 'uid1' => $message->uid1, 'name' => check_plain(format_username($account)));
      if ($message->timestamp > $last_timestamp) {
        $last_timestamp = $message->timestamp;
      }
    }*/


    //echo 'SELECT u.name, m.uid1, m.uid2, m.message, m.timestamp FROM {drupalchat_msg} m INNER JOIN {users} u ON m.uid1 = u.uid WHERE m.uid2 = '.$user->uid.' AND m.timestamp > '.$last_timestamp.' ORDER BY m.timestamp ASC';

    _drupalchat_touch_user($user->uid);
    module_invoke_all('drupalchat_ajaxpoll'); // AJAX poll hook
  }
  elseif ($polling_method == DRUPALCHAT_LONGPOLL) {
    do {
      sleep(3);
	  /*watchdog('drupalchat', '%a - %b - OLD - %c - CURRENT %e - %d', array('%a' => $user->uid, '%b' => time(), '%b' => time(), '%c' => print_r($buddylist_online_old,true), '%d' => print_r(_drupalchat_buddylist_diff($buddylist_online_old, $buddylist_online),true), '%e' => print_r($buddylist_online,true)), WATCHDOG_DEBUG);*/
      $buddylist_online = _drupalchat_buddylist_online($buddylist);
      //$message_count = db_query('SELECT COUNT(*) FROM {drupalchat_msg} m INNER JOIN {users} u ON m.uid1 = u.uid WHERE m.uid2 = :m.uid2 AND m.timestamp > :m.timestamp', array(':m.uid2' => $user->uid, ':m.timestamp' => $last_timestamp))->fetchField();
      if($user->uid > 0) {
	    $message_count = db_query(' SELECT COUNT(*)
                                    FROM {drupalchat_msg} m
                                    WHERE (m.uid2 IN (:uid2,\'c-0\') OR m.uid1 = :uid2)
                                    AND m.timestamp > :timestamp', array(':uid2' => $user->uid, ':timestamp' => $last_timestamp))->fetchField();
      }
	  else {
	    $message_count = db_query(' SELECT COUNT(*)
                                    FROM {drupalchat_msg} m
                                    WHERE (m.uid2 IN (:uid2,\'c-0\') OR m.uid1 = :uid2)
                                    AND m.timestamp > :timestamp', array(':uid2' => '0-'._drupalchat_get_sid(), ':timestamp' => $last_timestamp))->fetchField();
	  }
	  _drupalchat_touch_user($user->uid);
      module_invoke_all('drupalchat_longpoll'); // Long poll hook
    } while (((time() - $initial_time) < (ini_get('max_execution_time') - 5)) && ($message_count == 0) && (_drupalchat_buddylist_diff($buddylist_online_old, $buddylist_online)));
  }
  if (($message_count > 0) || ($polling_method == DRUPALCHAT_AJAX)) {
    if($user->uid > 0) {
      $messages = db_query('SELECT m.message_id, m.uid1, m.uid2, m.message, m.timestamp FROM {drupalchat_msg} m WHERE (m.uid2 IN (:uid2,\'c-0\') OR m.uid1 = :uid2) AND m.timestamp > :timestamp ORDER BY m.timestamp ASC', array(':uid2' => $user->uid, ':timestamp' => $last_timestamp));
    }
	else {
	  $messages = db_query('SELECT m.message_id, m.uid1, m.uid2, m.message, m.timestamp FROM {drupalchat_msg} m WHERE (m.uid2 IN (:uid2,\'c-0\') OR m.uid1 = :uid2) AND m.timestamp > :timestamp ORDER BY m.timestamp ASC', array(':uid2' => '0-'._drupalchat_get_sid(), ':timestamp' => $last_timestamp));
	}
    //drupal_set_message('<pre>'.print_r($messages,true).'</pre>');
    //while ($message = db_fetch_object($messages)) {
    // Drupal 7
    foreach ($messages as $message) {
	  //$arr = explode("-", $message->uid1, 2);
	  //drupal_set_message('hi - ' . strpos($message->uid1,'-'));
	  if(((!strpos($message->uid1,'-')) && ($message->uid1 != $user->uid)) || ((strpos($message->uid1,'-')) && ($message->uid1 != '0-'._drupalchat_get_sid()))) {
	    if(!strpos($message->uid1,'-')) {
	      $account = user_load($message->uid1);
		  $json['messages'][] = array('message' => $message->message, 'timestamp' => date("H:i", $message->timestamp), 'uid1' => $message->uid1, 'name' => check_plain(format_username($account)), 'uid2' => $message->uid2, 'message_id' => $message->message_id,);
	    }
	    else {
	      $arr = explode("-", $message->uid1, 2);
		  $sid = $arr[1];
	      $name = db_query('SELECT name FROM {drupalchat_users} WHERE uid = :uid AND session = :sid', array(':uid' => '0', ':sid' => $sid))->fetchField();
	      $json['messages'][] = array('message' => $message->message, 'timestamp' => date("H:i", $message->timestamp), 'uid1' => $message->uid1, 'name' => $name, 'uid2' => $message->uid2, 'message_id' => $message->message_id,);
	    }
	  }
	  else {
	    if(!strpos($message->uid2,'-')) {
	      $account = user_load($message->uid2);
		  $json['messages'][] = array('message' => $message->message, 'timestamp' => date("H:i", $message->timestamp), 'uid1' => $message->uid1, 'name' => check_plain(format_username($account)), 'uid2' => $message->uid2, 'message_id' => $message->message_id,);
	    }
	    else {
	      $arr = explode("-", $message->uid2, 2);
		  $sid = $arr[1];
	      $name = db_query('SELECT name FROM {drupalchat_users} WHERE uid = :uid AND session = :sid', array(':uid' => '0', ':sid' => $sid))->fetchField();
	      $json['messages'][] = array('message' => $message->message, 'timestamp' => date("H:i", $message->timestamp), 'uid1' => $message->uid1, 'name' => $name, 'uid2' => $message->uid2, 'message_id' => $message->message_id,);
	    }
	  }
	  //if($message->
      if ($message->timestamp > $last_timestamp) {
        $last_timestamp = $message->timestamp;
      }
    }
  }
  $json['status'] = 0;
  $json['total_messages'] = $message_count;
  $json['last_timestamp'] = $last_timestamp;
  $json['buddylist'] = isset($buddylist_online) ? $buddylist_online : $buddylist_online_old;

  
  /*echo '<pre>';
  print_r($json);
  echo '</pre>';*/
  drupal_json_output($json);
}

function _drupalchat_buddylist($uid) {
  $users = array();
  $drupalchat_rel = variable_get('drupalchat_rel', DRUPALCHAT_REL_AUTH);
  if ($drupalchat_rel == DRUPALCHAT_REL_UR) {
	$relationships = user_relationships_load(array('name' => drupal_explode_tags(variable_get('drupalchat_ur_name', 'friend')), 'user' => $uid, 'approved' => 1), array(), TRUE);
    foreach ($relationships as $rid => $relationship) {
      $uid == $relationship->requester_id ? $users[] = $relationship->requestee_id : $users[] = $relationship->requester_id;
    }
  }
  elseif ($drupalchat_rel == DRUPALCHAT_REL_FF) {
    $result = db_query("SELECT * FROM {flag_friend} WHERE uid = :uid OR friend_uid = :uid", array(':uid' => $uid, ':friend_uid' => $uid));
    
    foreach ($result as $friend) {
      $uid == $friend->uid ? $users[] = $friend->friend_uid : $users[] = $friend->uid;
    }
  }
  return $users;
}

function _drupalchat_buddylist_online($buddylist) {
  global $user;

  $users = array();
  if(variable_get('drupalchat_enable_chatroom', 1) == 1) {
    $users['c-0'] = array('name' => t('Public Chatroom'), 'status' => '1');
  }
  if (variable_get('drupalchat_rel', DRUPALCHAT_REL_AUTH) > DRUPALCHAT_REL_AUTH) {
    // Return empty on an empty buddylist
    if (empty($buddylist)) {
      $users['total'] = 0;
      return $users;
    }
	$result = db_select('drupalchat_users', 'n')
      ->fields('n', array('uid', 'name', 'status'))
      ->condition('timestamp', (time() - variable_get('drupalchat_user_latency', 2)), '>=')
      ->condition('uid', $buddylist, 'IN')
      ->execute();
  }
  else {
    if($user->uid > 0) {
	  $result = db_select('drupalchat_users', 'n')
	    ->fields('n', array('uid', 'name', 'status', 'session'))
        ->condition('timestamp', (time() - variable_get('drupalchat_user_latency', 2)), '>=')
        ->condition('uid', $user->uid, '<>')
        ->execute();
	}
	else {
	  $result = db_select('drupalchat_users', 'n')
	    ->fields('n', array('uid', 'name', 'status', 'session'))
        ->condition('timestamp', (time() - variable_get('drupalchat_user_latency', 2)), '>=')
        ->condition('session', _drupalchat_get_sid(), '<>')
        ->execute();
	}
  }
  foreach ($result as $buddy) {
    if($buddy->uid > 0) {
	  $account = user_load($buddy->uid);
	  $users[$buddy->uid] = array('name' => check_plain(format_username($account)), 'status' => $buddy->status);
	}
	else {
	  $users[$buddy->uid . '-' . $buddy->session] = array('name' => check_plain($buddy->name), 'status' => $buddy->status);
	}
  } 
  $users['total'] = count($users);
  if(variable_get('drupalchat_enable_chatroom', 1) == 1) {
    $users['total']--;
  }
  return $users;
}

function _drupalchat_buddylist_diff($ar1, $ar2) {
  if ($ar1['total'] != $ar2['total']) {
    return FALSE;
  }

  foreach ($ar1 as $key => $value) {
    if (!isset($ar2[$key])) {
      return FALSE;
    }
    if ($value['status'] != $ar2[$key]['status']) {
      return FALSE;
    }
  }

  return TRUE;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_library_path($variable, $match, $filename) {
  module_load_include('inc', 'drupalchat', 'includes/drupalchat.admin');
  $path = _drupalchat_autodiscover_path($match, $filename);
  //echo $path;
  variable_set($variable, $path);
  return $path;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalchat_yui_path($reset = FALSE) {
  static $path;
  if (!isset($path) || $reset) {
    if (!($path = variable_get('drupalchat_yui_path', NULL)) || $reset) {
      $path = drupalchat_library_path('drupalchat_yui_path', '/^yui-min\.js$/i', 'yui-min.js');
    }
  }

  return $path;
}

function _drupalchat_autodiscover_path($match, $filename) {
  $path = '';
  //echo $match;

  $files = drupal_system_listing($match, 'libraries', 'basename', 0);

  /*echo '<pre>'; print_r($files); echo '</pre>';
  die;*/
  foreach ($files as $key => $value){
      if (preg_match("/$filename/i", $key)) {
          /*$path = dirname($value->filename);
          echo $path;
          die;*/
          $path = dirname($value->uri);
      }
  }

  /*echo $filename;
  echo '<pre>'; print_r($files); echo '</pre>';
  if (isset($files[$filename])) {
    echo 'ici';
    $path = dirname($files[$filename]->filename);
      
  }*/
  return $path;
}

function drupalchat_get_messages() {
  global $user;
  if(($user->uid > 0) || (_drupalchat_get_sid() != -1)) {
    $output = '';
	if (variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL) == DRUPALCHAT_COMMERCIAL) {
	  global $user;
      $data = json_encode(array(
        'uid' => ($user->uid)?$user->uid:'0-'._drupalchat_get_sid(),
        'api_key' => variable_get('drupalchat_external_api_key', NULL),));
      $options = array(
        'method' => 'POST',
        'data' => $data,
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json'),
      );

      $result = drupal_http_request(DRUPALCHAT_EXTERNAL_A_HOST . ':' . DRUPALCHAT_EXTERNAL_A_PORT . '/r/', $options);
	  $query = json_decode($result->data);
    }
    else {	
      $guid = ($user->uid)?($user->uid):('0-'._drupalchat_get_sid());
	  $query = db_query('SELECT u.name as name, g.uid as uid, g.message as message, g.TIMESTAMP as timestamp 
	                     FROM (
						   SELECT uid, message, TIMESTAMP 
						     FROM (
							 (
							   SELECT m1.uid1 AS uid, m1.timestamp AS TIMESTAMP, m1.message AS message
							   FROM {drupalchat_msg} m1
							   INNER JOIN (
							     SELECT MAX( t1.timestamp ) AS TIMESTAMP, t1.uid1
								 FROM {drupalchat_msg} t1
								 WHERE t1.uid2 =  :uid
								 GROUP BY t1.uid1
							   ) recent ON recent.timestamp = m1.timestamp
							   AND recent.uid1 = m1.uid1
							   ORDER BY TIMESTAMP DESC
							 )
							 UNION (
							   SELECT m1.uid2 AS uid, m1.timestamp AS TIMESTAMP, m1.message AS message
							   FROM {drupalchat_msg} m1
							   INNER JOIN (
							     SELECT MAX( t1.timestamp ) AS TIMESTAMP, t1.uid2
								 FROM drupalchat_msg t1
								 WHERE t1.uid1 =  :uid
								 GROUP BY t1.uid2
							   )recent ON recent.timestamp = m1.timestamp
							   AND recent.uid2 = m1.uid2
							   ORDER BY TIMESTAMP DESC
							 )
						    ) AS f
							ORDER BY 3 DESC
						  ) AS g INNER JOIN {drupalchat_users} u ON 
						  (g.uid = u.uid AND u.uid!= 0) OR (u.uid = 0 AND g.uid = CONCAT(\'0-\', u.session))
						GROUP BY uid', array(':uid' => $guid));
    }
    foreach($query as $record) {
      $output .= '<div style="display:block;border-bottom: 1px solid #ccc; padding: 10px;"><div style="font-size:130%; display: inline;">' . l($record->name,'drupalchat/messages/message/' . $record->uid) . '</div><div style="float:right;color:#AAA; font-size: 70%;">' . format_date($record->timestamp,'long') . '</div><div style="display: block; padding: 10px;">' . $record->message . '</div></div>';
    }
    //$output .= '</tbody></table>';
    //$user_item = user_load($user->uid);
	//$output .= '<pre>' . print_r($user_item,true) . '</pre>';
    //$output .= theme('user_picture', array('account' =>$user_item));	
  }
  return $output;
}

function drupalchat_get_messages_specific($id = "1") {
  global $user;
  if(($user->uid > 0) || (_drupalchat_get_sid() != -1)) {
    $guid = ($user->uid)?($user->uid):('0-'._drupalchat_get_sid());
    $output = '';
	if (variable_get('drupalchat_polling_method', DRUPALCHAT_LONGPOLL) == DRUPALCHAT_COMMERCIAL) {
	  global $user;
      $data = json_encode(array(
        'uid1' => ($user->uid)?$user->uid:'0-'._drupalchat_get_sid(),
		'uid2' => $id,
        'api_key' => variable_get('drupalchat_external_api_key', NULL),));
      $options = array(
        'method' => 'POST',
        'data' => $data,
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json'),
      );

      $result = drupal_http_request(DRUPALCHAT_EXTERNAL_A_HOST . ':' . DRUPALCHAT_EXTERNAL_A_PORT .  '/q/', $options);
	  $q = json_decode($result->data);
    }
    else {
    $result = db_select('drupalchat_msg', 'm');
       $result->innerJoin('drupalchat_users', 'u', '(m.uid1 = u.uid AND u.uid!= 0) OR (u.uid = 0 AND m.uid1 = CONCAT(\'0-\', u.session))');
	   $result->innerJoin('drupalchat_users', 'v', '(m.uid2 = v.uid AND v.uid!= 0) OR (v.uid = 0 AND m.uid2 = CONCAT(\'0-\', v.session))');
	   $result->addField('u', 'name', 'from_name');
	   $result->addField('v', 'name', 'to_name');
       $result->fields('m', array('uid1', 'uid2', 'message', 'timestamp'));
    $result->condition(db_or()
        ->condition(db_and()->condition('uid1', $guid)->condition('uid2',$id))
        ->condition(db_and()->condition('uid1', $id)->condition('uid2',$guid)));
    $q = $result->execute();
	}
    foreach($q as $record) {
      $output .= '<div style="display:block;border-bottom: 1px solid #ccc; padding: 10px;"><div style="font-size:100%; display: inline; color: #3B5998;">' . $record->from_name . '</div><div style="float:right;color:#AAA; font-size: 70%;">' . format_date($record->timestamp,'long') . '</div><div style="display: block; padding: 10px;">' . $record->message . '</div></div>';
    }
    $output .= '';
  }
  return $output;
}
function _drupalchat_get_auth($name) {
  global $user;
  global $base_url;
  if(user_access('administer drupalchat')) {
    $role = "admin";
  }
  else {
    $role = "normal";
  }
  
  $data = json_encode(array(
    'uname' => $name,
    'uid' => ($user->uid)?$user->uid:'0-'._drupalchat_get_sid(),
    'api_key' => variable_get('drupalchat_external_api_key', NULL),
	'image_path' => $base_url . '/' . drupal_get_path('module', 'drupalchat') . '/themes/' . 'light' . '/images',
	'isLog' => TRUE,
	'whichTheme' => 'blue',
	'enableStatus' => TRUE,
	'role' => $role,
	'validState' => array('available','offline','busy','idle')));
  $options = array(
    'method' => 'POST',
    'data' => $data,
    'timeout' => 15,
    'headers' => array('Content-Type' => 'application/json'),
  );

  $result = drupal_http_request(DRUPALCHAT_EXTERNAL_A_HOST . ':' . DRUPALCHAT_EXTERNAL_A_PORT .  '/p/', $options);
  $result = drupal_json_decode($result->data);
  drupal_add_css(DRUPALCHAT_EXTERNAL_A_HOST . ':' . DRUPALCHAT_EXTERNAL_A_PORT .  '/i/' . $result['css'] . '/cache.css', 'external');
  return $result['key'];
}